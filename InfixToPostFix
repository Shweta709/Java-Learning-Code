package Stack;

import java.util.Stack;

public class InfixToPostFix {
	
	static int Prec(char ch) {
		switch(ch) {
		case '+':
		case '-':
			return 1;
			
		case '*':
		case '/':
			return 2;
		case '^':
			return 3;
			
		}
		return -1;
	}
	
	static String inFixPostFix(String exp) {
		String result=new String("");
		
		Stack<Character> stack=new Stack<Character>();
		
		for(int i=0;i<exp.length();i++) {
			
			char cha=exp.charAt(i);
			
			if(Character.isLetterOrDigit(cha)) 
				result+= cha;
				
				else if (cha =='(') 
					stack.push(cha);
				else if(cha==')')
				{
					while(!stack.isEmpty() && stack.peek() !='(') {
						result +=stack.pop();
					}
					stack.pop();
				}
				else {
					while(!stack.isEmpty() &&  Prec(cha) <= Prec(stack.peek()) ) {
					result+=stack.pop();	
					}
					stack.push(cha);
				}
			}	
		while(!stack.isEmpty()) {
			if(stack.peek() == '(') {
				return "Invalid Expression";
			}
			result+=stack.pop();
				}
		return result;
				
			}
		
		
		
	

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String exp="a+b*(c^d-e)^(f+g*h)-i";
		System.out.println(inFixPostFix(exp));

	}

}
